
from mqtt import MQTT
import socket
import ast
import os
import threading
import datetime

server = socket.socket()
user = socket.socket()
server.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
user.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
server.bind(('', 33333))
user.bind(('', 55555))
server.listen(5)
user.listen(5)

class threadSystem(threading.Thread):
	systemList = []
	def __init__(self, raspid):
		threading.Thread.__init__(self)
		print('Init new thread')
		self.raspid = raspid
		self.devlistdir = './RASP/' + self.raspid + '/' + 'DEVLIST' + '.txt'
		self.devlist = {'FILE':'DEVLIST', 'RASPID':str(self.raspid)}
		self.rulelistdir = './RASP/' + self.raspid + '/' + 'RULELIST' + '.txt'
		self.rulelist = {'FILE':'RULELIST', 'RASPID':str(self.raspid)}
		self.devdatadir = './RASP/' + self.raspid + '/' + 'DEVDATA' + '.txt'
		self.devdata = {'FILE':'DEVDATA', 'RASPID':str(self.raspid)}
		threadSystem.systemList.append(self.raspid)
		tpin = self.raspid + '/s2m'
		tpout = self.raspid + '/m2s'
		self.mqtt = MQTT('iot.eclipse.org', 1883, tpin, tpout)
		print('Init Done')
	def run(self):
		print('Thread start')
		start_time = datetime.datetime.now()
		while True:
			#print('Calculate time out')
			delta = (datetime.datetime.now() - start_time).seconds
			if delta > 10:
				print('System {} disconnected'.format(self.raspid))
				threadSystem.systemList.remove(self.raspid)
				return
			#print('Connecting to MQTT Broker')
			self.mqtt.run()
			msg = ''
			msg = self.mqtt.get()
			if msg != '':
				start_time = datetime.datetime.now()
				cmd = ast.literal_eval(msg)
				if cmd['FUNC'] == 'UPDATE' and cmd['DEV1'] != '0':
					if cmd['DEV1'] in self.devdata:
						if len(self.devdata[cmd['DEV1']]) > 100:
							del self.devdata[cmd['DEV1']][0]
						new_data = (str(datetime.datetime.now()), cmd['DATA']['1'])
						self.devdata[cmd['DEV1']].append(new_data)
					else:
						self.devdata[cmd['DEV1']] = []
						new_data = (str(datetime.datetime.now()), cmd['DATA']['1'])
						self.devdata[cmd['DEV1']].append(new_data)
					f = open(self.devdatadir, 'w')
					f.write(str(self.devdata))
					f.close()

def raspHandler(data):
	jsondata = ast.literal_eval(data)
   # print(jsondata)
	raspid = jsondata['RASPID']
	filename = jsondata['FILE']
	if not os.path.isdir('./RASP/' + raspid):
		os.makedirs('./RASP/' + raspid)
   # print('Done mkdir')
	if not os.path.exists('./RASP/' + raspid + '/' + filename + '.txt'):
		f = open('./RASP/' + raspid + '/' + filename + '.txt', 'w')
		f.close()
	f = open('./RASP/' + raspid + '/' + filename + '.txt', 'r')
	current_data = f.read()
	f.close()
	if data != current_data:
		f = open('./RASP/' + raspid + '/' + filename + '.txt', 'w')
		f.write(data)
		f.close()
	if raspid not in threadSystem.systemList:
		print('Create new thread')
		newThread = threadSystem(raspid)
		newThread.start()
	else:
		print(threadSystem.systemList)
		print(raspid)
		print('Already')

def userHanlder(data):
	jsondata = ast.literal_eval(data)
	user_id = jsondata['USER']
	user_database = 
	if 'FILE' in jsondata:
		

def serverRasp():
    while True:
        client1, addr1 = server.accept()
        print('RASP Connect from addr {}: {}'.format(addr1[0],addr1[1]))
        data = client1.recv(1024).decode('utf-8')
        raspHandler(data)

def serverUser():
    while True:
        client2, addr2 = user.accept()
        print('USER Connect from addr {}: {}'.format(addr2[0],addr2[1]))
        data = client2.recv(1024).decode('utf-8')

threadRasp = threading.Thread(target=serverRasp)
threadUser = threading.Thread(target=serverUser)
threadRasp.start()
threadUser.start()
